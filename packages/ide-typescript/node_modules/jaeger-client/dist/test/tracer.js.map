{"version":3,"sources":["../../test/tracer.js"],"names":["constants","opentracing","describe","tracer","reporter","InMemoryReporter","beforeEach","Tracer","ConstSampler","afterEach","clear","close","it","ck","mytracer","contextKey","headers","mycontext","extract","FORMAT_HTTP_HEADERS","assert","equal","toString","myspan","startSpan","childOf","context","traceIdStr","exheaders","inject","notEqual","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","spanContext","FORMAT_TEXT_MAP","rootSpan","isOk","traceId","isNotOk","parentId","flags","getBaggageItem","Utils","encodeInt64","spanId","SpanContext","withBinaryIds","start","rpcServer","internalTags","references","tags","keyOne","keyTwo","span","_startInternalSpan","deepEqual","_startTime","Object","keys","_tags","length","_report","spans","actualTags","_","sortBy","o","key","value","startTime","Date","getTime","isSampled","nextId","getId","parentContext","childOfContext","childOfRef","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","testCases","message","spanOptions","verify","forEach","params","finish","baggage","savedContext","SAMPLED_MASK","assertByFormat","carrier","format","extractedContext","to","throw","throttler","DefaultThrottler","setProcess","sinon","spy","debugThrottler","_process","serviceName","isString","uuid","calledWith","calledOnce","sampled","metrics","each","Metrics","LocalMetricFactory","fromString","Tags","SPAN_KIND","SPAN_KIND_RPC_SERVER","LocalBackend","counterEquals","metricName","spansFinished"],"mappings":"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","file":"tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport * as opentracing from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport sinon from 'sinon';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('tracer should', () => {\n  let tracer;\n  let reporter = new InMemoryReporter();\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n  });\n\n  afterEach(() => {\n    reporter.clear();\n    tracer.close();\n  });\n\n  it('be able to override codec contextKey and extract context', () => {\n    let ck = 'test-trace-id';\n    let mytracer = new Tracer('test-service-name', reporter, new ConstSampler(true), {\n      contextKey: ck,\n    });\n\n    let headers = {\n      'test-trace-id': 'a:b:c:d',\n    };\n\n    let mycontext = mytracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.equal(mycontext.toString(), headers[ck]);\n\n    let myspan = mytracer.startSpan('myspan', { childOf: mycontext });\n    assert.equal(myspan.context().traceIdStr, 'a');\n\n    let exheaders = {};\n\n    mytracer.inject(myspan.context(), opentracing.FORMAT_HTTP_HEADERS, exheaders);\n    assert.notEqual(exheaders[ck], null);\n  });\n\n  it('begin a new span given only baggage headers', () => {\n    // Users sometimes want to pass baggage even if there is no span.\n    // In this case we must ensure a new root span is created.\n    let headers = {};\n    // combine normal baggage encoding\n    headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'robot'] = 'Bender';\n    // with custom encoding via `jaeger-baggage` header\n    headers[constants.JAEGER_BAGGAGE_HEADER] = 'male=Fry, female=Leela, Lord Nibbler';\n    let spanContext = tracer.extract(opentracing.FORMAT_TEXT_MAP, headers);\n    let rootSpan = tracer.startSpan('fry', { childOf: spanContext });\n\n    assert.isOk(rootSpan.context().traceId);\n    assert.isNotOk(rootSpan.context().parentId);\n    assert.equal(rootSpan.context().flags, 1);\n    assert.equal('Bender', rootSpan.getBaggageItem('robot'));\n    assert.equal('Leela', rootSpan.getBaggageItem('female'));\n    assert.equal('Fry', rootSpan.getBaggageItem('male'));\n  });\n\n  it('create a span correctly through _startInternalSpan', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let start = 123.456;\n    let rpcServer = false;\n    let internalTags = [];\n    let references = [];\n    let tags = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let span = tracer._startInternalSpan(\n      context,\n      'op-name',\n      start,\n      internalTags,\n      tags,\n      null,\n      rpcServer,\n      references\n    );\n\n    assert.deepEqual(span.context().traceId, traceId);\n    assert.deepEqual(span.context().spanId, spanId);\n    assert.deepEqual(span.context().parentId, parentId);\n    assert.equal(span.context().flags, flags);\n    assert.equal(span._startTime, start);\n    assert.equal(Object.keys(span._tags).length, 2);\n  });\n\n  it('report a span with no tracer level tags', () => {\n    let span = tracer.startSpan('op-name');\n    tracer._report(span);\n    assert.isOk(reporter.spans.length, 1);\n    let actualTags = _.sortBy(span._tags, o => {\n      return o.key;\n    });\n\n    assert.equal(2, actualTags.length);\n    assert.equal(actualTags[0].key, 'sampler.param');\n    assert.equal(actualTags[1].key, 'sampler.type');\n    assert.equal(actualTags[0].value, true);\n    assert.equal(actualTags[1].value, 'const');\n  });\n\n  it('start a root span with proper structure', () => {\n    let startTime = new Date(2016, 8, 18).getTime();\n    let span = tracer.startSpan('test-name', {\n      startTime: startTime,\n    });\n\n    assert.equal(span.context().traceId, span.context().spanId);\n    assert.isNotOk(span.context().parentId);\n    assert.isOk(span.context().isSampled());\n    assert.equal(span._startTime, startTime);\n  });\n\n  describe('start a child span represented as a separate span from parent, using childOf and references', () => {\n    let nextId = 0;\n    const getId = () => Utils.encodeInt64(nextId++);\n    const traceId = getId();\n    const flags = 1;\n\n    const parentContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const childOfContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    const followsFromContext = SpanContext.withBinaryIds(traceId, getId(), null, flags);\n    const followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    const testCases = [\n      {\n        message: 'starts a span based on childOf',\n        spanOptions: {\n          childOf: parentContext,\n          references: [],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span based on childOf, ignoring FOLLOWS_FROM',\n        spanOptions: {\n          childOf: parentContext,\n          references: [followsFromRef],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span based on childOf, ignoring CHILD_OF and FOLLOWS_FROM',\n        spanOptions: {\n          childOf: parentContext,\n          references: [childOfRef, followsFromRef],\n        },\n        verify: parentContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the CHILD_OF ref',\n        spanOptions: {\n          childOf: null,\n          references: [childOfRef],\n        },\n        verify: childOfContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the FOLLOWS_FROM ref',\n        spanOptions: {\n          childOf: null,\n          references: [followsFromRef],\n        },\n        verify: followsFromContext,\n      },\n      {\n        message: 'starts a span with parent falling back to the CHILD_OF ref and ignoring FOLLOWS_FROM',\n        spanOptions: {\n          childOf: null,\n          references: [childOfRef, followsFromRef],\n        },\n        verify: childOfContext,\n      },\n    ];\n\n    testCases.forEach(params => {\n      const { message, spanOptions, verify } = params;\n      it(message, () => {\n        let span = tracer.startSpan('bender', {\n          childOf: spanOptions.childOf,\n          references: spanOptions.references,\n        });\n        span.finish();\n        assert.deepEqual(span.context().traceId, verify.traceId);\n        assert.deepEqual(span.context().parentId, verify.spanId);\n      });\n    });\n  });\n\n  it('inject plain text headers into carrier, and extract span context with the same value', () => {\n    let keyOne = 'keyOne';\n    let keyTwo = 'keyTwo';\n    let baggage = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n\n    let assertByFormat = format => {\n      let carrier = {};\n      tracer.inject(savedContext, format, carrier);\n      let extractedContext = tracer.extract(format, carrier);\n\n      assert.deepEqual(savedContext.traceId, extractedContext.traceId);\n      assert.deepEqual(savedContext.spanId, extractedContext.spanId);\n      assert.deepEqual(savedContext.parentId, extractedContext.parentId);\n      assert.equal(savedContext.flags, extractedContext.flags);\n      assert.equal(savedContext.baggage[keyOne], extractedContext.baggage[keyOne]);\n      assert.equal(savedContext.baggage[keyTwo], extractedContext.baggage[keyTwo]);\n    };\n\n    assertByFormat(opentracing.FORMAT_TEXT_MAP);\n    assertByFormat(opentracing.FORMAT_HTTP_HEADERS);\n  });\n\n  it('inject url encoded values into headers', () => {\n    let baggage = {\n      keyOne: 'Leela vs. Bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n    let carrier = {};\n\n    tracer.inject(savedContext, opentracing.FORMAT_HTTP_HEADERS, carrier);\n    assert.equal(carrier['uberctx-keyOne'], 'Leela%20vs.%20Bender');\n  });\n\n  it('assert inject and extract throw errors when given an invalid format', () => {\n    let carrier = {};\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    // subtle but expect wants a function to call not the result of a function call.\n    expect(() => {\n      tracer.inject(context, 'fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n    expect(() => {\n      tracer.extract('fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n  });\n\n  it('report spans', () => {\n    let span = tracer.startSpan('operation');\n    tracer._report(span);\n\n    assert.equal(reporter.spans.length, 1);\n  });\n\n  it('set _process on initialization', () => {\n    const throttler = new DefaultThrottler();\n    throttler.setProcess = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    assert.equal(tracer._process.serviceName, 'x');\n    assert.isString(tracer._process.uuid);\n    sinon.assert.calledWith(throttler.setProcess, tracer._process);\n  });\n\n  it('close _debugThrottler on close', () => {\n    const throttler = new DefaultThrottler();\n    throttler.close = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    tracer.close();\n    sinon.assert.calledOnce(throttler.close);\n  });\n\n  describe('Metrics', () => {\n    it('startSpan', () => {\n      let params = [\n        {\n          rpcServer: false,\n          context: null,\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesStartedSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:1',\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesJoinedSampled'],\n        },\n        {\n          rpcServer: false,\n          context: null,\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesStartedNotSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:0',\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesJoinedNotSampled'],\n        },\n      ];\n\n      _.each(params, o => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(o.sampled), {\n          metrics: metrics,\n        });\n\n        let context = null;\n        if (o.context) {\n          context = SpanContext.fromString(o.context);\n        }\n\n        let tags = {};\n        if (o.rpcServer) {\n          tags[opentracing.Tags.SPAN_KIND] = opentracing.Tags.SPAN_KIND_RPC_SERVER;\n        }\n\n        tracer.startSpan('bender', {\n          childOf: context,\n          tags: tags,\n        });\n\n        _.each(o.metrics, metricName => {\n          assert.isOk(LocalBackend.counterEquals(metrics[metricName], 1));\n        });\n      });\n    });\n\n    it('emits counter when report called', () => {\n      let metrics = new Metrics(new LocalMetricFactory());\n      tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(true), {\n        metrics: metrics,\n      });\n      let span = tracer.startSpan('bender');\n      tracer._report(span);\n\n      assert.isOk(LocalBackend.counterEquals(metrics.spansFinished, 1));\n    });\n  });\n});\n"]}