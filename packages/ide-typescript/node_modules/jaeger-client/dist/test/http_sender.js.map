{"version":3,"sources":["../../test/http_sender.js"],"names":["URL","batchSize","describe","app","server","tracer","thrift","serverEndpoint","reporter","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","Thrift","source","fs","readFileSync","path","join","__dirname","allowOptionalArguments","use","type","post","req","res","headers","authorization","b64auth","split","Buffer","toString","username","password","emit","thriftObj","Batch","rw","readFrom","body","batch","value","status","send","listen","address","port","InMemoryReporter","Tracer","ConstSampler","HTTPSender","endpoint","maxSpanBatchSize","setProcess","_process","afterEach","close","assertCallback","expectedNumSpans","expectedError","numSpans","error","it","startSpan","finish","ThriftUtils","spanToThrift","on","isOk","spans","length","process","serviceName","actualTags","_","sortBy","tags","o","key","append","undefined","flush","done","parentContext","context","childOfContext","childOfRef","opentracing","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","options","childOf","expectedTraceId","expectedParentId","traceId","parentId","each","span","tSpan","isNotOk","i","s","push","creds","to","err","have","string","RemoteReporter"],"mappings":"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","file":"http_sender.js","sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport express from 'express';\nimport * as URL from 'url';\nimport { raw } from 'body-parser';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport { Thrift } from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport HTTPSender from '../src/reporters/http_sender.js';\n\nconst batchSize = 100;\n\ndescribe('http sender', () => {\n  let app;\n  let server;\n  let tracer;\n  let thrift;\n  let serverEndpoint;\n  let reporter;\n  let sender;\n\n  function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n    assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n    assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n    assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n    assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n    assert.equal(spanOne.operationName, spanTwo.operationName);\n    assert.deepEqual(spanOne.references, spanTwo.references);\n    assert.equal(spanOne.flags, spanTwo.flags);\n    assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n    assert.deepEqual(spanOne.duration, spanTwo.duration);\n  }\n\n  beforeEach(() => {\n    thrift = new Thrift({\n      source: fs.readFileSync(path.join(__dirname, '../src/jaeger-idl/thrift/jaeger.thrift'), 'ascii'),\n      allowOptionalArguments: true,\n    });\n\n    app = express();\n    app.use(raw({ type: 'application/x-thrift' }));\n    app.post('/api/traces', (req, res) => {\n      if (req.headers.authorization) {\n        const b64auth = (req.headers.authorization || '').split(' ')[1] || '';\n        const [username, password] = new Buffer(b64auth, 'base64').toString().split(':');\n        server.emit('authReceived', [username, password]);\n      }\n      let thriftObj = thrift.Batch.rw.readFrom(req.body, 0);\n      let batch = thriftObj.value;\n      if (batch) {\n        server.emit('batchReceived', batch);\n      }\n      res.status(202).send('');\n    });\n    server = app.listen(0);\n    serverEndpoint = `http://localhost:${server.address().port}/api/traces`;\n\n    reporter = new InMemoryReporter();\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    sender = new HTTPSender({\n      endpoint: serverEndpoint,\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n  });\n\n  afterEach(() => {\n    tracer.close();\n    server.close();\n  });\n\n  function assertCallback(expectedNumSpans, expectedError): SenderCallback {\n    return (numSpans, error) => {\n      assert.equal(numSpans, expectedNumSpans);\n      assert.equal(error, expectedError);\n    };\n  }\n\n  it('should read and verify spans and process sent', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanTwo = tracer.startSpan('operation-two');\n    spanTwo.finish(); // finish to set span duration\n    spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n    server.on('batchReceived', batch => {\n      assert.isOk(batch);\n      assert.equal(batch.spans.length, 2);\n\n      assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n      assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n      assert.equal(batch.process.serviceName, 'test-service-name');\n      let actualTags = _.sortBy(batch.process.tags, o => {\n        return o.key;\n      });\n      assert.equal(actualTags.length, 4);\n      assert.equal(actualTags[0].key, 'client-uuid');\n      assert.equal(actualTags[1].key, 'ip');\n      assert.equal(actualTags[2].key, 'jaeger.hostname');\n      assert.equal(actualTags[3].key, 'jaeger.version');\n    });\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanTwo, assertCallback(0, undefined));\n    sender.flush((numSpans, error) => {\n      assertCallback(2, undefined)(numSpans, error);\n      done();\n    });\n  });\n\n  describe('span reference tests', () => {\n    let tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(true));\n    let parentContext = tracer.startSpan('just-used-for-context').context();\n    let childOfContext = tracer.startSpan('just-used-for-context').context();\n    let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    let followsFromContext = tracer.startSpan('just-used-for-context').context();\n    let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    let options = [\n      { childOf: null, references: [], expectedTraceId: null, expectedParentId: null },\n      {\n        childOf: parentContext,\n        references: [childOfRef, followsFromRef],\n        expectedTraceId: parentContext.traceId,\n        expectedParentId: parentContext.parentId,\n      },\n    ];\n\n    _.each(options, o => {\n      it('should serialize span references', done => {\n        const span = tracer.startSpan('bender', {\n          childOf: o.childOf,\n          references: o.references,\n        });\n        span.finish();\n        const tSpan = ThriftUtils.spanToThrift(span);\n\n        server.on('batchReceived', function(batch) {\n          assert.isOk(batch);\n          assertThriftSpanEqual(assert, tSpan, batch.spans[0]);\n\n          if (o.expectedTraceId) {\n            assert.deepEqual(batch.spans[0].traceIdLow, o.expectedTraceId);\n          }\n\n          if (o.expectedParentId) {\n            assert.deepEqual(batch.spans[0].parentId, o.expectedParentId);\n          } else {\n            assert.isNotOk(batch.spans[0].parentId);\n          }\n\n          done();\n        });\n\n        sender.append(tSpan);\n        sender.flush();\n      });\n    });\n  });\n\n  it('should flush spans when capacity is reached', done => {\n    const spans = [];\n    for (let i = 0; i < batchSize; i++) {\n      let s = tracer.startSpan(`operation-${i}`);\n      s.finish();\n      spans.push(ThriftUtils.spanToThrift(s));\n    }\n\n    for (let i = 0; i < batchSize - 1; i++) {\n      sender.append(spans[i], assertCallback(0, undefined));\n    }\n\n    sender.append(spans[batchSize - 1], assertCallback(batchSize, undefined));\n\n    server.on('batchReceived', batch => {\n      done();\n    });\n  });\n\n  it('should use basic auth if username/password provided', done => {\n    sender = new HTTPSender({\n      endpoint: serverEndpoint,\n      username: 'me',\n      password: 's3cr3t',\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n\n    const s = tracer.startSpan('operation-one');\n    s.finish();\n    sender.append(ThriftUtils.spanToThrift(s), assertCallback(0, undefined));\n    sender.flush();\n\n    server.on('authReceived', creds => {\n      expect(creds[0]).to.equal('me');\n      expect(creds[1]).to.equal('s3cr3t');\n      done();\n    });\n  });\n\n  it('should returns error from flush() on failed buffer conversion', done => {\n    let span = tracer.startSpan('leela');\n    span.finish(); // finish to set span duration\n    span = ThriftUtils.spanToThrift(span);\n    span.flags = 'string'; // malform the span to create a serialization error\n\n    sender.append(span);\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('Error encoding Thrift batch:');\n      done();\n    });\n  });\n\n  it('should return 0,undefined on flush() with no spans', () => {\n    sender.flush(assertCallback(0, undefined));\n  });\n\n  it('should gracefully handle errors emitted by socket.send', done => {\n    sender = new HTTPSender({\n      endpoint: 'http://foo.bar.xyz',\n      maxSpanBatchSize: batchSize,\n    });\n    sender.setProcess(reporter._process);\n\n    let tracer = new Tracer('test-service-name', new RemoteReporter(sender), new ConstSampler(true));\n\n    tracer.startSpan('testSpan').finish();\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error sending spans over HTTP: Error: getaddrinfo ENOTFOUND');\n      tracer.close(done);\n    });\n  });\n});\n"]}